import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
 
df = pd.read_csv('houseprices2.csv')


df.bedrooms = df.bedrooms.fillna(df.bedrooms.median())


X = df.drop('price', axis=1) 
y = df['price'] 


X = (X - X.mean()) / X.std()



X = np.c_[np.ones((X.shape[0], 1)), X]


def compute_cost(X, y, theta):
    m = len(y)
    predictions = X.dot(theta)
    cost = (1 / (2 * m)) * np.sum(np.square(predictions - y))
    return cost


def gradient_descent(X, y, theta, learning_rate, iterations):
    m = len(y)
    cost_history = np.zeros(iterations)
    for i in range(iterations):
        predictions = X.dot(theta)
        errors = np.subtract(predictions, y)
        theta = theta - (learning_rate * (1 / m) * X.T.dot(errors))
        cost_history[i] = compute_cost(X, y, theta)
    return theta, cost_history


theta = np.zeros(X.shape[1])

iterations = 1500
learning_rate = 0.01


theta, cost_history = gradient_descent(X, y, theta, learning_rate, iterations)


print('Intercept:', theta[0])
print('Coefficients:', theta[1:])



plt.plot(range(1, iterations + 1), cost_history, color='blue')
plt.xlabel('Iterations')
plt.ylabel('Cost')
plt.title('Convergence of Gradient Descent')
plt.show()

x_new = np.array([1, (3000 - df['area'].mean()) / df['area'].std(), 
                  (3 - df['bedrooms'].mean()) / df['bedrooms'].std(), 
                  (40 - df['age'].mean()) / df['age'].std()]) # New data point
price_new = x_new.dot(theta)
print('(1) Price of home with 3000 sqr ft area, 3 bedrooms, 40 year old:', price_new)

x_new = np.array([1, (2500 - df['area'].mean()) / df['area'].std(), 
                  (5 - df['bedrooms'].mean()) / df['bedrooms'].std(), 
                  (10 - df['age'].mean()) / df['age'].std()]) # New data point
price_new = x_new.dot(theta)
print('(2) Price of home with 2500 sqr ft area, 5 bedrooms, 10 year old:', price_new)


